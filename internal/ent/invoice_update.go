// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finhub-go/internal/ent/debt"
	"finhub-go/internal/ent/invoice"
	"finhub-go/internal/ent/paymentstatus"
	"finhub-go/internal/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InvoiceUpdate) SetUpdatedAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetAmount sets the "amount" field.
func (iu *InvoiceUpdate) SetAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetAmount()
	iu.mutation.SetAmount(f)
	return iu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetAmount(*f)
	}
	return iu
}

// AddAmount adds f to the "amount" field.
func (iu *InvoiceUpdate) AddAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddAmount(f)
	return iu
}

// SetTitle sets the "title" field.
func (iu *InvoiceUpdate) SetTitle(s string) *InvoiceUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTitle(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetIssueDate sets the "issue_date" field.
func (iu *InvoiceUpdate) SetIssueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetIssueDate(t)
	return iu
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIssueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetIssueDate(*t)
	}
	return iu
}

// ClearIssueDate clears the value of the "issue_date" field.
func (iu *InvoiceUpdate) ClearIssueDate() *InvoiceUpdate {
	iu.mutation.ClearIssueDate()
	return iu
}

// SetDueDate sets the "due_date" field.
func (iu *InvoiceUpdate) SetDueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetDueDate(t)
	return iu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableDueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetDueDate(*t)
	}
	return iu
}

// SetStatusID sets the "status" edge to the PaymentStatus entity by ID.
func (iu *InvoiceUpdate) SetStatusID(id uuid.UUID) *InvoiceUpdate {
	iu.mutation.SetStatusID(id)
	return iu
}

// SetNillableStatusID sets the "status" edge to the PaymentStatus entity by ID if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStatusID(id *uuid.UUID) *InvoiceUpdate {
	if id != nil {
		iu = iu.SetStatusID(*id)
	}
	return iu
}

// SetStatus sets the "status" edge to the PaymentStatus entity.
func (iu *InvoiceUpdate) SetStatus(p *PaymentStatus) *InvoiceUpdate {
	return iu.SetStatusID(p.ID)
}

// AddDebtIDs adds the "debts" edge to the Debt entity by IDs.
func (iu *InvoiceUpdate) AddDebtIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.AddDebtIDs(ids...)
	return iu
}

// AddDebts adds the "debts" edges to the Debt entity.
func (iu *InvoiceUpdate) AddDebts(d ...*Debt) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iu.AddDebtIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearStatus clears the "status" edge to the PaymentStatus entity.
func (iu *InvoiceUpdate) ClearStatus() *InvoiceUpdate {
	iu.mutation.ClearStatus()
	return iu
}

// ClearDebts clears all "debts" edges to the Debt entity.
func (iu *InvoiceUpdate) ClearDebts() *InvoiceUpdate {
	iu.mutation.ClearDebts()
	return iu
}

// RemoveDebtIDs removes the "debts" edge to Debt entities by IDs.
func (iu *InvoiceUpdate) RemoveDebtIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.RemoveDebtIDs(ids...)
	return iu
}

// RemoveDebts removes "debts" edges to Debt entities.
func (iu *InvoiceUpdate) RemoveDebts(d ...*Debt) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iu.RemoveDebtIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InvoiceUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if v, ok := iu.mutation.Title(); ok {
		if err := invoice.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Invoice.title": %w`, err)}
		}
	}
	return nil
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAmount(); ok {
		_spec.AddField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(invoice.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if iu.mutation.IssueDateCleared() {
		_spec.ClearField(invoice.FieldIssueDate, field.TypeTime)
	}
	if value, ok := iu.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if iu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.StatusTable,
			Columns: []string{invoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.StatusTable,
			Columns: []string{invoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.DebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.DebtsTable,
			Columns: []string{invoice.DebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedDebtsIDs(); len(nodes) > 0 && !iu.mutation.DebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.DebtsTable,
			Columns: []string{invoice.DebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.DebtsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.DebtsTable,
			Columns: []string{invoice.DebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InvoiceUpdateOne) SetUpdatedAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetAmount sets the "amount" field.
func (iuo *InvoiceUpdateOne) SetAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetAmount()
	iuo.mutation.SetAmount(f)
	return iuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetAmount(*f)
	}
	return iuo
}

// AddAmount adds f to the "amount" field.
func (iuo *InvoiceUpdateOne) AddAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddAmount(f)
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *InvoiceUpdateOne) SetTitle(s string) *InvoiceUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTitle(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetIssueDate sets the "issue_date" field.
func (iuo *InvoiceUpdateOne) SetIssueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetIssueDate(t)
	return iuo
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIssueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetIssueDate(*t)
	}
	return iuo
}

// ClearIssueDate clears the value of the "issue_date" field.
func (iuo *InvoiceUpdateOne) ClearIssueDate() *InvoiceUpdateOne {
	iuo.mutation.ClearIssueDate()
	return iuo
}

// SetDueDate sets the "due_date" field.
func (iuo *InvoiceUpdateOne) SetDueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetDueDate(t)
	return iuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableDueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetDueDate(*t)
	}
	return iuo
}

// SetStatusID sets the "status" edge to the PaymentStatus entity by ID.
func (iuo *InvoiceUpdateOne) SetStatusID(id uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.SetStatusID(id)
	return iuo
}

// SetNillableStatusID sets the "status" edge to the PaymentStatus entity by ID if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStatusID(id *uuid.UUID) *InvoiceUpdateOne {
	if id != nil {
		iuo = iuo.SetStatusID(*id)
	}
	return iuo
}

// SetStatus sets the "status" edge to the PaymentStatus entity.
func (iuo *InvoiceUpdateOne) SetStatus(p *PaymentStatus) *InvoiceUpdateOne {
	return iuo.SetStatusID(p.ID)
}

// AddDebtIDs adds the "debts" edge to the Debt entity by IDs.
func (iuo *InvoiceUpdateOne) AddDebtIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.AddDebtIDs(ids...)
	return iuo
}

// AddDebts adds the "debts" edges to the Debt entity.
func (iuo *InvoiceUpdateOne) AddDebts(d ...*Debt) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iuo.AddDebtIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearStatus clears the "status" edge to the PaymentStatus entity.
func (iuo *InvoiceUpdateOne) ClearStatus() *InvoiceUpdateOne {
	iuo.mutation.ClearStatus()
	return iuo
}

// ClearDebts clears all "debts" edges to the Debt entity.
func (iuo *InvoiceUpdateOne) ClearDebts() *InvoiceUpdateOne {
	iuo.mutation.ClearDebts()
	return iuo
}

// RemoveDebtIDs removes the "debts" edge to Debt entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveDebtIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.RemoveDebtIDs(ids...)
	return iuo
}

// RemoveDebts removes "debts" edges to Debt entities.
func (iuo *InvoiceUpdateOne) RemoveDebts(d ...*Debt) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iuo.RemoveDebtIDs(ids...)
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InvoiceUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if v, ok := iuo.mutation.Title(); ok {
		if err := invoice.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Invoice.title": %w`, err)}
		}
	}
	return nil
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAmount(); ok {
		_spec.AddField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(invoice.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if iuo.mutation.IssueDateCleared() {
		_spec.ClearField(invoice.FieldIssueDate, field.TypeTime)
	}
	if value, ok := iuo.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if iuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.StatusTable,
			Columns: []string{invoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.StatusTable,
			Columns: []string{invoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.DebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.DebtsTable,
			Columns: []string{invoice.DebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedDebtsIDs(); len(nodes) > 0 && !iuo.mutation.DebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.DebtsTable,
			Columns: []string{invoice.DebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.DebtsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.DebtsTable,
			Columns: []string{invoice.DebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
