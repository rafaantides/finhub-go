// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finhub-go/internal/ent/paymentstatus"
	"finhub-go/internal/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentStatusUpdate is the builder for updating PaymentStatus entities.
type PaymentStatusUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentStatusMutation
}

// Where appends a list predicates to the PaymentStatusUpdate builder.
func (psu *PaymentStatusUpdate) Where(ps ...predicate.PaymentStatus) *PaymentStatusUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *PaymentStatusUpdate) SetUpdatedAt(t time.Time) *PaymentStatusUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetName sets the "name" field.
func (psu *PaymentStatusUpdate) SetName(s string) *PaymentStatusUpdate {
	psu.mutation.SetName(s)
	return psu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psu *PaymentStatusUpdate) SetNillableName(s *string) *PaymentStatusUpdate {
	if s != nil {
		psu.SetName(*s)
	}
	return psu
}

// SetDescription sets the "description" field.
func (psu *PaymentStatusUpdate) SetDescription(s string) *PaymentStatusUpdate {
	psu.mutation.SetDescription(s)
	return psu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (psu *PaymentStatusUpdate) SetNillableDescription(s *string) *PaymentStatusUpdate {
	if s != nil {
		psu.SetDescription(*s)
	}
	return psu
}

// ClearDescription clears the value of the "description" field.
func (psu *PaymentStatusUpdate) ClearDescription() *PaymentStatusUpdate {
	psu.mutation.ClearDescription()
	return psu
}

// Mutation returns the PaymentStatusMutation object of the builder.
func (psu *PaymentStatusUpdate) Mutation() *PaymentStatusMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PaymentStatusUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PaymentStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PaymentStatusUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PaymentStatusUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PaymentStatusUpdate) defaults() {
	if _, ok := psu.mutation.UpdatedAt(); !ok {
		v := paymentstatus.UpdateDefaultUpdatedAt()
		psu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PaymentStatusUpdate) check() error {
	if v, ok := psu.mutation.Name(); ok {
		if err := paymentstatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PaymentStatus.name": %w`, err)}
		}
	}
	return nil
}

func (psu *PaymentStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentstatus.Table, paymentstatus.Columns, sqlgraph.NewFieldSpec(paymentstatus.FieldID, field.TypeUUID))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentstatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.Name(); ok {
		_spec.SetField(paymentstatus.FieldName, field.TypeString, value)
	}
	if value, ok := psu.mutation.Description(); ok {
		_spec.SetField(paymentstatus.FieldDescription, field.TypeString, value)
	}
	if psu.mutation.DescriptionCleared() {
		_spec.ClearField(paymentstatus.FieldDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PaymentStatusUpdateOne is the builder for updating a single PaymentStatus entity.
type PaymentStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentStatusMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *PaymentStatusUpdateOne) SetUpdatedAt(t time.Time) *PaymentStatusUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetName sets the "name" field.
func (psuo *PaymentStatusUpdateOne) SetName(s string) *PaymentStatusUpdateOne {
	psuo.mutation.SetName(s)
	return psuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psuo *PaymentStatusUpdateOne) SetNillableName(s *string) *PaymentStatusUpdateOne {
	if s != nil {
		psuo.SetName(*s)
	}
	return psuo
}

// SetDescription sets the "description" field.
func (psuo *PaymentStatusUpdateOne) SetDescription(s string) *PaymentStatusUpdateOne {
	psuo.mutation.SetDescription(s)
	return psuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (psuo *PaymentStatusUpdateOne) SetNillableDescription(s *string) *PaymentStatusUpdateOne {
	if s != nil {
		psuo.SetDescription(*s)
	}
	return psuo
}

// ClearDescription clears the value of the "description" field.
func (psuo *PaymentStatusUpdateOne) ClearDescription() *PaymentStatusUpdateOne {
	psuo.mutation.ClearDescription()
	return psuo
}

// Mutation returns the PaymentStatusMutation object of the builder.
func (psuo *PaymentStatusUpdateOne) Mutation() *PaymentStatusMutation {
	return psuo.mutation
}

// Where appends a list predicates to the PaymentStatusUpdate builder.
func (psuo *PaymentStatusUpdateOne) Where(ps ...predicate.PaymentStatus) *PaymentStatusUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PaymentStatusUpdateOne) Select(field string, fields ...string) *PaymentStatusUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PaymentStatus entity.
func (psuo *PaymentStatusUpdateOne) Save(ctx context.Context) (*PaymentStatus, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PaymentStatusUpdateOne) SaveX(ctx context.Context) *PaymentStatus {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PaymentStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PaymentStatusUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PaymentStatusUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdatedAt(); !ok {
		v := paymentstatus.UpdateDefaultUpdatedAt()
		psuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PaymentStatusUpdateOne) check() error {
	if v, ok := psuo.mutation.Name(); ok {
		if err := paymentstatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PaymentStatus.name": %w`, err)}
		}
	}
	return nil
}

func (psuo *PaymentStatusUpdateOne) sqlSave(ctx context.Context) (_node *PaymentStatus, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentstatus.Table, paymentstatus.Columns, sqlgraph.NewFieldSpec(paymentstatus.FieldID, field.TypeUUID))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentstatus.FieldID)
		for _, f := range fields {
			if !paymentstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentstatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.Name(); ok {
		_spec.SetField(paymentstatus.FieldName, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Description(); ok {
		_spec.SetField(paymentstatus.FieldDescription, field.TypeString, value)
	}
	if psuo.mutation.DescriptionCleared() {
		_spec.ClearField(paymentstatus.FieldDescription, field.TypeString)
	}
	_node = &PaymentStatus{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
